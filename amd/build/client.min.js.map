{"version":3,"file":"client.min.js","sources":["../src/client.js"],"sourcesContent":["define(['local_webworkers/sharedworker!rtcomms_phppollshared/worker', 'tool_realtime/api'],\n    function(sharedWorker, realtimeApi) {\n    const sharedWorkerClientPrototype = {\n        init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            this.sharedWorker = sharedWorker();\n            this.sharedWorker.port.start();\n            this.sharedWorker.port.postMessage({\n                type: 'configure',\n                configuration: {\n                    userId: userId,\n                    token: token,\n                    pollURLParam: pollURLParam,\n                    maxDelay: maxDelay,\n                    maxFailures: maxFailures,\n                    earliestMessageCreationTime: earliestMessageCreationTime,\n                    pollType: pollType,\n                }\n            });\n            this.sharedWorker.port.onmessage = this.messageReceiver;\n            window.onpagehide = () => {\n                this.sharedWorker.port.postMessage({type: 'close'});\n            };\n        },\n\n        subscribe(context, component, area, itemid, fromId= -1, fromTimestamp = -1) {\n            this.sharedWorker.port.postMessage({\n                type: 'listen',\n                channel: {\n                    context: context,\n                    component: component,\n                    area: area,\n                    itemid: itemid,\n                    fromId: fromId,\n                    fromTimestamp: fromTimestamp,\n                }\n            });\n        },\n\n        messageReceiver(e) {\n            realtimeApi.publish(e.data);\n        },\n    };\n\n    /**\n     *\n     * @constructor\n     */\n    function SharedWorkerClient() {\n        /**\n         *\n         * @type {SharedWorker}\n         */\n        this.sharedWorker = null;\n    }\n    Object.assign(SharedWorkerClient, sharedWorkerClientPrototype);\n    let instance = new SharedWorkerClient();\n    return {\n        init: function(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            instance.init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType);\n        },\n        subscribe: (context, component, area, itemid, fromId= -1, fromTimestamp = -1) => {\n            instance.subscribe(context, component, area, itemid, fromId, fromTimestamp);\n        },\n    };\n});"],"names":["define","sharedWorker","realtimeApi","sharedWorkerClientPrototype","init","userId","token","pollURLParam","maxDelay","maxFailures","earliestMessageCreationTime","pollType","port","start","postMessage","type","configuration","onmessage","this","messageReceiver","window","onpagehide","subscribe","context","component","area","itemid","fromId","fromTimestamp","channel","e","publish","data","SharedWorkerClient","Object","assign","instance"],"mappings":"AAAAA,sCAAO,CAAC,6DAA8D,sBAClE,SAASC,aAAcC,mBACjBC,4BAA8B,CAChCC,KAAKC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,eAC7EV,aAAeA,oBACfA,aAAaW,KAAKC,aAClBZ,aAAaW,KAAKE,YAAY,CAC/BC,KAAM,YACNC,cAAe,CACXX,OAAQA,OACRC,MAAOA,MACPC,aAAcA,aACdC,SAAUA,SACVC,YAAaA,YACbC,4BAA6BA,4BAC7BC,SAAUA,iBAGbV,aAAaW,KAAKK,UAAYC,KAAKC,gBACxCC,OAAOC,WAAa,UACXpB,aAAaW,KAAKE,YAAY,CAACC,KAAM,YAIlDO,UAAUC,QAASC,UAAWC,KAAMC,YAAQC,+DAAS,EAAGC,sEAAiB,OAChE3B,aAAaW,KAAKE,YAAY,CAC/BC,KAAM,SACNc,QAAS,CACLN,QAASA,QACTC,UAAWA,UACXC,KAAMA,KACNC,OAAQA,OACRC,OAAQA,OACRC,cAAeA,kBAK3BT,gBAAgBW,GACZ5B,YAAY6B,QAAQD,EAAEE,iBAQrBC,0BAKAhC,aAAe,KAExBiC,OAAOC,OAAOF,mBAAoB9B,iCAC9BiC,SAAW,IAAIH,yBACZ,CACH7B,KAAM,SAASC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,UAC5FyB,SAAShC,KAAKC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,WAEnGW,UAAW,SAACC,QAASC,UAAWC,KAAMC,YAAQC,+DAAS,EAAGC,sEAAiB,EACvEQ,SAASd,UAAUC,QAASC,UAAWC,KAAMC,OAAQC,OAAQC"}