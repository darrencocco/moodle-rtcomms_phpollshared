{"version":3,"file":"client.min.js","sources":["../src/client.js"],"sourcesContent":["define(['local_webworkers/web_worker', 'local_rtcomms/api'],\n    function(webWorker, realtimeApi) {\n    const sharedWorkerClientPrototype = {\n        init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            this.sharedWorker = new SharedWorker(webWorker.getURI('rtcomms_phppollshared/worker'));\n            this.sharedWorker.port.addEventListener('message', this.messageReceiver);\n            this.sharedWorker.port.start();\n            this.sharedWorker.port.postMessage({\n                type: 'configure',\n                configuration: {\n                    userId: userId,\n                    token: token,\n                    pollURLParam: pollURLParam,\n                    maxDelay: maxDelay,\n                    maxFailures: maxFailures,\n                    earliestMessageCreationTime: earliestMessageCreationTime,\n                    pollType: pollType,\n                }\n            });\n            window.addEventListener( 'pagehide', () => {\n                this.sharedWorker.port.postMessage({type: 'close'});\n            });\n            realtimeApi.setImplementation(pub);\n        },\n\n        subscribe(context, component, area, itemid, fromId= -1, fromTimestamp = -1) {\n            this.sharedWorker.port.postMessage({\n                type: 'listen',\n                channel: {\n                    context: context,\n                    component: component,\n                    area: area,\n                    itemid: itemid,\n                    fromId: fromId,\n                    fromTimestamp: fromTimestamp,\n                }\n            });\n        },\n\n        messageReceiver(e) {\n            switch(e.data.type) {\n                case 'message':\n                    realtimeApi.publish(e.data.message);\n                    break;\n                case 'ping':\n                    this.sharedWorker.port.postMessage({type: 'pong'});\n                    break;\n                default:\n                    // TODO: unknown message, should handle this with an error log to the console.\n            }\n        },\n\n        sendToServer(contextId, component, area, itemId, payload) {\n            this.sharedWorker.port.postMessage({\n                type: 'send',\n                contextId: contextId,\n                component: component,\n                area: area,\n                itemId: itemId,\n                payload: payload,\n            });\n        }\n    };\n\n    /**\n     *\n     * @constructor\n     */\n    function SharedWorkerClient() {\n        /**\n         *\n         * @type {SharedWorker}\n         */\n        this.sharedWorker = null;\n    }\n    Object.assign(SharedWorkerClient.prototype, sharedWorkerClientPrototype);\n    let instance = new SharedWorkerClient();\n    let pub = {\n        init: function(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            instance.init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType);\n        },\n        subscribe: (context, component, area, itemid, fromId= -1, fromTimestamp = -1) => {\n            instance.subscribe(context, component, area, itemid, fromId, fromTimestamp);\n        },\n        sendToServer: (contextId, component, area, itemId, payload) => {\n            instance.sendToServer(contextId, component, area, itemId, payload);\n        }\n    };\n    return pub;\n});"],"names":["define","webWorker","realtimeApi","sharedWorkerClientPrototype","init","userId","token","pollURLParam","maxDelay","maxFailures","earliestMessageCreationTime","pollType","sharedWorker","SharedWorker","getURI","port","addEventListener","this","messageReceiver","start","postMessage","type","configuration","window","setImplementation","pub","subscribe","context","component","area","itemid","fromId","fromTimestamp","channel","e","data","publish","message","sendToServer","contextId","itemId","payload","SharedWorkerClient","Object","assign","prototype","instance"],"mappings":"AAAAA,sCAAO,CAAC,8BAA+B,sBACnC,SAASC,UAAWC,mBACdC,4BAA8B,CAChCC,KAAKC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,eAC7EC,aAAe,IAAIC,aAAaZ,UAAUa,OAAO,sCACjDF,aAAaG,KAAKC,iBAAiB,UAAWC,KAAKC,sBACnDN,aAAaG,KAAKI,aAClBP,aAAaG,KAAKK,YAAY,CAC/BC,KAAM,YACNC,cAAe,CACXjB,OAAQA,OACRC,MAAOA,MACPC,aAAcA,aACdC,SAAUA,SACVC,YAAaA,YACbC,4BAA6BA,4BAC7BC,SAAUA,YAGlBY,OAAOP,iBAAkB,YAAY,UAC5BJ,aAAaG,KAAKK,YAAY,CAACC,KAAM,aAE9CnB,YAAYsB,kBAAkBC,MAGlCC,UAAUC,QAASC,UAAWC,KAAMC,YAAQC,+DAAS,EAAGC,sEAAiB,OAChEpB,aAAaG,KAAKK,YAAY,CAC/BC,KAAM,SACNY,QAAS,CACLN,QAASA,QACTC,UAAWA,UACXC,KAAMA,KACNC,OAAQA,OACRC,OAAQA,OACRC,cAAeA,kBAK3Bd,gBAAgBgB,UACLA,EAAEC,KAAKd,UACL,UACDnB,YAAYkC,QAAQF,EAAEC,KAAKE,mBAE1B,YACIzB,aAAaG,KAAKK,YAAY,CAACC,KAAM,WAOtDiB,aAAaC,UAAWX,UAAWC,KAAMW,OAAQC,cACxC7B,aAAaG,KAAKK,YAAY,CAC/BC,KAAM,OACNkB,UAAWA,UACXX,UAAWA,UACXC,KAAMA,KACNW,OAAQA,OACRC,QAASA,qBASZC,0BAKA9B,aAAe,KAExB+B,OAAOC,OAAOF,mBAAmBG,UAAW1C,iCACxC2C,SAAW,IAAIJ,mBACfjB,IAAM,CACNrB,KAAM,SAASC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,UAC5FmC,SAAS1C,KAAKC,OAAQC,MAAOC,aAAcC,SAAUC,YAAaC,4BAA6BC,WAEnGe,UAAW,SAACC,QAASC,UAAWC,KAAMC,YAAQC,+DAAS,EAAGC,sEAAiB,EACvEc,SAASpB,UAAUC,QAASC,UAAWC,KAAMC,OAAQC,OAAQC,gBAEjEM,aAAc,CAACC,UAAWX,UAAWC,KAAMW,OAAQC,WAC/CK,SAASR,aAAaC,UAAWX,UAAWC,KAAMW,OAAQC,kBAG3DhB"}