define("rtcomms_phppollshared/worker-lazy",["rtcomms_phppoll/realtime","core/pubsub","tool_realtime/events"],(function(PhpPoll,PubSub,RealTimeEvents){let portMap={},portToChannelMap={},channelToPortMap={},phpPoll=null,channelBacklog=[];self.onconnect=e=>{const port=e.ports[0];port.clientId=portNumber().next(),portMap[port.clientId]=port,portToChannelMap[port.clientId]=[],port.addEventListener("message",(e=>{var clientId,channelData,configuration;if(function(port){return port.hasOwnProperty("clientId")}(port))switch(e.data.type){case"configure":null===phpPoll&&(configuration=e.data.configuration,phpPoll=new PhpPoll,phpPoll.init(configuration.userId,configuration.token,configuration.pollURLParam,configuration.maxDelay,configuration.maxFailures,configuration.earliestMessageCreationTime,configuration.pollType),channelBacklog.length>0&&(channelBacklog.forEach((channel=>{phpPoll.subscribe(channel.context,channel.component,channel.area,channel.itemid,channel.fromId,channel.fromTimestamp)})),channelBacklog=[]));break;case"listen":(function(port,channelName){return portToChannelMap[port.clientId].includes(channelName)})(port,(channelData=e.data.channel,RealTimeEvents.EVENT+"/"+channelData.context+"/"+channelData.component+"/"+channelData.area+"/"+channelData.itemid))||function(port,channel){let channelName=channelName(channel);portToChannelMap[port.clientId].push(channelName),channelToPortMap.hasOwnProperty(channelName)||(channelToPortMap[channelName]=[],PubSub.subscribe(channelName,serverMessageHandler));channelToPortMap[channelName].push(port.clientId),null===phpPoll?channelBacklog.push(channel):phpPoll.subscribe(channel)}(port,e.data.channel);break;case"close":clientId=port.clientId,delete portMap[clientId],portToChannelMap.clientId.forEach((channel=>{let index=channelToPortMap[channel].indexOf(clientId);channelToPortMap[channel].splice(index,1)})),delete portToChannelMap[clientId],delete port.clientId;break;default:port.postMessage("error")}})),port.start()};let serverMessageHandler=function(message){let channelName=channelName(message);channelToPortMap.hasOwnProperty(channelName)&&channelToPortMap[channelName].forEach((portId=>{portMap[portId].postMessage(message)}))};let _portNumber=null,portNumber=function(){return null!=_portNumber||(_portNumber=function*(){for(let i=0;i<Infinity;i+=1)yield i}),_portNumber}}));

//# sourceMappingURL=worker-lazy.min.js.map